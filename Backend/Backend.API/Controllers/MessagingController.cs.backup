// File: Backend/Backend.API/Controllers/MessagingController.cs
using Backend.Application.DTOs.Messages;
using Backend.Application.Features.Messages.Commands;
using Backend.Application.Features.Messages.Queries;
using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;

namespace Backend.API.Controllers;

[ApiController]
[Route("api/[controller]")]
[Authorize]
public class MessagingController : ControllerBase
{
    private readonly IMediator _mediator;
    private readonly ILogger<MessagingController> _logger;

    public MessagingController(IMediator mediator, ILogger<MessagingController> logger)
    {
        _mediator = mediator;
        _logger = logger;
    }

    /// <summary>
    /// Send a new message
    /// </summary>
    [HttpPost]
    [ProducesResponseType(typeof(MessageDto), StatusCodes.Status201Created)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    public async Task<IActionResult> SendMessage([FromBody] SendMessageRequest request)
    {
        try
        {
            var userId = GetCurrentUserId();
            var command = new SendMessageCommand(
                request.Subject,
                request.Content,
                request.Priority,
                request.RecipientUserId,
                request.PodmiotId,
                userId
            );

            var result = await _mediator.Send(command);
            return CreatedAtAction(nameof(GetMessageById), new { id = result.Id }, result);
        }
        catch (ArgumentException ex)
        {
            _logger.LogWarning(ex, "Invalid send message request");
            return BadRequest(new { message = ex.Message });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error sending message");
            return StatusCode(500, new { message = "An error occurred while sending the message" });
        }
    }

    /// <summary>
    /// Reply to an existing message
    /// </summary>
    [HttpPost("reply")]
    [ProducesResponseType(typeof(MessageDto), StatusCodes.Status201Created)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    public async Task<IActionResult> ReplyToMessage([FromBody] ReplyToMessageRequest request)
    {
        try
        {
            var userId = GetCurrentUserId();
            var command = new ReplyToMessageCommand(
                request.ParentMessageId,
                request.Content,
                request.Priority,
                userId
            );

            var result = await _mediator.Send(command);
            return CreatedAtAction(nameof(GetMessageById), new { id = result.Id }, result);
        }
        catch (UnauthorizedAccessException ex)
        {
            _logger.LogWarning(ex, "Unauthorized reply attempt");
            return Forbid();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error replying to message");
            return StatusCode(500, new { message = "An error occurred while replying to the message" });
        }
    }

    /// <summary>
    /// Get inbox messages
    /// </summary>
    [HttpGet("inbox")]
    [ProducesResponseType(typeof(PaginatedMessageResult), StatusCodes.Status200OK)]
    public async Task<IActionResult> GetInbox(
        [FromQuery] int pageNumber = 1,
        [FromQuery] int pageSize = 20,
        [FromQuery] string? status = null)
    {
        try
        {
            var userId = GetCurrentUserId();
            var query = new GetInboxMessagesQuery(userId, pageNumber, pageSize, status);
            var result = await _mediator.Send(query);
            return Ok(result);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error retrieving inbox");
            return StatusCode(500, new { message = "An error occurred while retrieving inbox" });
        }
    }

    /// <summary>
    /// Get sent messages
    /// </summary>
    [HttpGet("sent")]
    [ProducesResponseType(typeof(PaginatedMessageResult), StatusCodes.Status200OK)]
    public async Task<IActionResult> GetSent(
        [FromQuery] int pageNumber = 1,
        [FromQuery] int pageSize = 20)
    {
        try
        {
            var userId = GetCurrentUserId();
            var query = new GetSentMessagesQuery(userId, pageNumber, pageSize);
            var result = await _mediator.Send(query);
            return Ok(result);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error retrieving sent messages");
            return StatusCode(500, new { message = "An error occurred while retrieving sent messages" });
        }
    }

    /// <summary>
    /// Get message by ID
    /// </summary>
    [HttpGet("{id}")]
    [ProducesResponseType(typeof(MessageDto), StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    public async Task<IActionResult> GetMessageById(Guid id)
    {
        try
        {
            var userId = GetCurrentUserId();
            var query = new GetMessageByIdQuery(id, userId);
            var result = await _mediator.Send(query);
            return Ok(result);
        }
        catch (InvalidOperationException)
        {
            return NotFound(new { message = $"Message {id} not found" });
        }
        catch (UnauthorizedAccessException)
        {
            return Forbid();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error retrieving message {MessageId}", id);
            return StatusCode(500, new { message = "An error occurred while retrieving the message" });
        }
    }

    /// <summary>
    /// Get message thread
    /// </summary>
    [HttpGet("thread/{threadId}")]
    [ProducesResponseType(typeof(MessageThreadDto), StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    public async Task<IActionResult> GetThread(Guid threadId)
    {
        try
        {
            var userId = GetCurrentUserId();
            var query = new GetMessageThreadQuery(threadId, userId);
            var result = await _mediator.Send(query);
            return Ok(result);
        }
        catch (InvalidOperationException)
        {
            return NotFound(new { message = $"Thread {threadId} not found" });
        }
        catch (UnauthorizedAccessException)
        {
            return Forbid();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error retrieving thread {ThreadId}", threadId);
            return StatusCode(500, new { message = "An error occurred while retrieving the thread" });
        }
    }

    /// <summary>
    /// Mark message as read
    /// </summary>
    [HttpPut("{id}/read")]
    [ProducesResponseType(StatusCodes.Status204NoContent)]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    public async Task<IActionResult> MarkAsRead(Guid id)
    {
        try
        {
            var userId = GetCurrentUserId();
            var command = new MarkMessageAsReadCommand(id, userId);
            var result = await _mediator.Send(command);

            if (!result)
            {
                return NotFound(new { message = $"Message {id} not found" });
            }

            return NoContent();
        }
        catch (UnauthorizedAccessException)
        {
            return Forbid();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error marking message as read");
            return StatusCode(500, new { message = "An error occurred while marking the message as read" });
        }
    }

    /// <summary>
    /// Get unread message count
    /// </summary>
    [HttpGet("unread-count")]
    [ProducesResponseType(typeof(int), StatusCodes.Status200OK)]
    public async Task<IActionResult> GetUnreadCount()
    {
        try
        {
            var userId = GetCurrentUserId();
            var query = new GetUnreadCountQuery(userId);
            var result = await _mediator.Send(query);
            return Ok(result);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error retrieving unread count");
            return StatusCode(500, new { message = "An error occurred while retrieving unread count" });
        }
    }

    /// <summary>
    /// Get message summary (unread, inbox, sent counts)
    /// </summary>
    [HttpGet("summary")]
    [ProducesResponseType(typeof(MessageSummaryDto), StatusCodes.Status200OK)]
    public async Task<IActionResult> GetSummary()
    {
        try
        {
            var userId = GetCurrentUserId();
            var query = new GetMessageSummaryQuery(userId);
            var result = await _mediator.Send(query);
            return Ok(result);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error retrieving message summary");
            return StatusCode(500, new { message = "An error occurred while retrieving message summary" });
        }
    }

    private Guid GetCurrentUserId()
    {
        var userIdClaim = User.FindFirstValue(ClaimTypes.NameIdentifier);
        if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))
        {
            throw new UnauthorizedAccessException("User ID not found in token");
        }
        return userId;
    }
}
